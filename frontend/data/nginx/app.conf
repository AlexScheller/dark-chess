upstream app_server {
	server client:5005 fail_timeout=0;
}

server {
	listen 80;
	server_name darkchess.net www.darkchess.net;
	server_tokens off;

	location /.well-known/acme-challenge/ {
		root /var/www/certbot;
	}

	location / {
		return 301 https://darkchess.net$request_uri;
	}
}

server {
	listen 443 ssl;
	server_name www.darkchess.net;
	server_tokens off;

	ssl_certificate /etc/letsencrypt/live/darkchess.net/fullchain.pem;
	ssl_certificate_key /etc/letsencrypt/live/darkchess.net/privkey.pem;
	include /etc/letsencrypt/options-ssl-nginx.conf;
	ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;
	
	return 301 https://darkchess.net$request_uri;
}

server {
	listen 443 ssl;
	server_name darkchess.net;
	server_tokens off;

	ssl_certificate /etc/letsencrypt/live/darkchess.net/fullchain.pem;
	ssl_certificate_key /etc/letsencrypt/live/darkchess.net/privkey.pem;
	include /etc/letsencrypt/options-ssl-nginx.conf;
	ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

	location ^~ /static/ {
		include /etc/nginx/mime.types;
		root /var/www;
	}

	location /favicon.ico {
		alias /var/www/static/images/favicon.ico;
	}

	location / {
		proxy_pass http://app_server;
		proxy_set_header	Host					$http_host;
		proxy_set_header	X-Real-IP				$remote_addr;
		proxy_set_header	X-Forwarded-For			$proxy_add_x_forwarded_for;
		proxy_set_header	X-Forwarded-Proto		$scheme;
		# Flask traffic is all plain old http in our setup, so it serves
		# unencrypted redirects. Here, nginx "converts" them to https.
		proxy_redirect		http://darkchess.net/ 	https://darkchess.net;
	}
}