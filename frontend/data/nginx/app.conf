upstream app_server {
	server client:5005 fail_timeout=0;
}

server {
	listen 80;
	server_name darkchess.net;
	server_tokens off;

	location /.well-known/acme-challenge/ {
		root /var/www/certbot;
	}

	location / {
		return 301 https://www.darkchess.net$request_uri;
	}
}

# It's convenient to have a common frontend root for generating links and for
# cors purposes. Yeah, I could allow both naked and www but that would take
# more configuration work on the backend then the configuration work I've done
# right here.
server {
	listen 443 ssl;
	server_name darkchess.net;
	server_tokens off;

	ssl_certificate /etc/letsencrypt/live/darkchess.net/fullchain.pem;
	ssl_certificate_key /etc/letsencrypt/live/darkchess.net/privkey.pem;
	include /etc/letsencrypt/options-ssl-nginx.conf;
	ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;
	
	return 301 https://www.darkchess.net$request_uri;
}

server {
	listen 443 ssl;
	server_name www.darkchess.net;
	server_tokens off;

	ssl_certificate /etc/letsencrypt/live/darkchess.net/fullchain.pem;
	ssl_certificate_key /etc/letsencrypt/live/darkchess.net/privkey.pem;
	include /etc/letsencrypt/options-ssl-nginx.conf;
	ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

	# location /favicon.ico {
	# 	alias /static/images/favicon.ico;
	# }

	location / {
		proxy_set_header	Host				$http_host;
		proxy_set_header	X-Real-IP			$remote_addr;
		proxy_set_header	X-Forwarded-For		$proxy_add_x_forwarded_for;
		proxy_set_header	X-Forwarded-Proto	$scheme;
		proxy_redirect off;
		proxy_pass http://app_server;
	}
}