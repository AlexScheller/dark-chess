upstream app_server {
	server api:5000 fail_timeout=0;
}

server {
	listen 80;
	server_name api.darkchess.net;
	server_tokens off;

	location /.well-known/acme-challenge/ {
		root /var/www/certbot;
	}

	location / {
		return 301 https://api.darkchess.net$request_uri;
	}
}

server {
	listen 443 ssl;
	server_name api.darkchess.net;
	server_tokens off;

	ssl_certificate /etc/letsencrypt/live/api.darkchess.net/fullchain.pem;
	ssl_certificate_key /etc/letsencrypt/live/api.darkchess.net/privkey.pem;
	include /etc/letsencrypt/options-ssl-nginx.conf;
	ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

	location /socket.io {
		proxy_set_header	Host 			$http_host;
		proxy_set_header	X-Real-IP		$remote_addr;
		proxy_set_header	X-Forwarded-For	$proxy_add_x_forwarded_for;
		proxy_http_version 					1.1;
		proxy_buffering 					off;
		proxy_set_header 	Upgrade 		$http_upgrade;
		proxy_set_header	Connection		"Upgrade";
		proxy_pass 							http://app_server/socket.io;
	}

	location / {
		proxy_set_header	Host						$http_host;
		proxy_set_header 	X-Real-IP					$remote_addr;
		proxy_set_header	X-Forwarded-For				$proxy_add_x_forwarded_for;
		proxy_set_header	X-Forwarded-Proto			$scheme;
		# Flask traffic is all plain old http in our setup, so it serves
		# unencrypted redirects. Here, nginx "converts" them to https.
		proxy_redirect		http://api.darkchess.net/ 	https://api.darkchess.net;
		proxy_pass 										http://app_server;
	}
}
